name: deploy-webapp

on:
  workflow_call:
    inputs:
      app_name:
        required: true
        type: string

env:
  PRODUCTION_REGISTRY: docker.satel.ca 
  BRANCH_NAME: ''
  TAG_NAME: ''  
  CLEAN_BRANCH_NAME: ''
  IS_POETRY: ''
  EXTRA_ARGUMENTS: ''
  IMG_STR: ''
    
jobs:
  client-dependencies:
    name: Install client dependencies
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: client
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Set up node
        uses: actions/setup-node@v2
        with:
          node-version: '16'

      - name: Load cached client node_modules
        uses: actions/cache@v2
        with:
          path: '**/node_modules'
          key: ${{ runner.os }}-modules-${{ hashFiles('**/yarn.lock') }}-v1

      - name: Install client dependencies
        run: yarn install

      - name: Run Javascript lint check
        run: yarn lint  

      - name: Build client
        run: yarn build   

      - name: describe
        uses: actions/upload-artifact@v2
        with:
          name: build-folder
          path: ./client/build

  server-dependencies: 
    name: Build server
    needs: [client-dependencies]
    runs-on: ubuntu-latest
    # defaults:
    #   run:
    #     working-directory: server
    steps:
      - name: Check out repository
        uses: actions/checkout@v2

      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          registry: docker.satel.ca
          username: ${{ secrets.DOCKERUSER }}
          password: ${{ secrets.DOCKERPASS }}

      - name: Copy build folder
        uses: actions/download-artifact@v2
        with:
          name: build-folder
          path: ./client/build

      - name: Get branch names
        id: branch-name
        uses: tj-actions/branch-names@v6
  
      - name: Current branch name
        run: echo "BRANCH_NAME=${{ steps.branch-name.outputs.current_branch }}" >> $GITHUB_ENV 

      - name: Current tag name
        run:  echo "TAG_NAME=$(git describe --tag --abbrev=0)" >> $GITHUB_ENV

      - name: Assigning clean branch name for a branch
        if: env.BRANCH_NAME != ''
        run: |   
            if [[ ${{ env.BRANCH_NAME }} == 'main' ]]; then
                echo "CLEAN_BRANCH_NAME='main'" >> $GITHUB_ENV   
            elif [[ ${{ env.BRANCH_NAME }} != '' ]]; then
                echo "CLEAN_BRANCH_NAME=${{env.BRANCH_NAME}}" | sed 's/\//_/'  >> $GITHUB_ENV   
            fi 
      
      - name: Assigning clean branch name for a tag
        if: env.TAG_NAME != ''
        run: echo "CLEAN_BRANCH_NAME=${{ env.TAG_NAME }}" >> $GITHUB_ENV   

          
      - name: Poetry check
        run:  echo "IS_POETRY=$(cat Dockerfile.dockerfile| grep -c 'poetry')" >> $GITHUB_ENV 
      
      - name: Add arguments for poetry
        if: env.IS_POETRY > 0
        run: echo "EXTRA_ARGUMENTS='DEVFLAG=--dev'" >> $GITHUB_ENV  

      - name: Build & push Docker image
        uses: mr-smithers-excellent/docker-build-push@v5
        with:
          image: "${{ inputs.app_name }}"
          tags: "${{env.CLEAN_BRANCH_NAME}}"
          registry: docker.satel.ca
          dockerfile: Dockerfile
          buildArgs: "${{env.EXTRA_ARGUMENTS}}"
          username: ${{ secrets.DOCKERUSER }}
          password: ${{ secrets.DOCKERPASS }}

      - name: Docker up
        run:  docker-compose -f docker-compose.yml -f docker-compose.pipeline.yml up -d

      - name: Reports clean up
        run:  rm -f unittesting.xml coverage.xml typing.xml

      # - name: Dev image check
      #   run: |
      #       IMG_STR=$(cat docker-compose.override.yml | grep 'devenv' | cut -d ":" -f 2-3)
      #       IMG_LIST=(`echo ${IMG_STR}`);
      #       for i in "$IMG_LIST"
      #       do
      #         echo $i
      #         DOCKER_CLI_EXPERIMENTAL=enabled docker manifest inspect $i # getting an error with $i
      #       done  
    
      - name: App health check
        run: |
          sleep 10s
          docker-compose exec -T webapp python -c "import requests; requests.get('http://localhost:8000/health')"

      - name: Code tests    
        run: | 
            # Catch the exit codes so we don't exit the whole script before we are done.
            # Typing, linting, formatting check & unit and integration testing
            docker-compose exec -T webapp validatecodeonce; STATUS1=$?
            docker cp "$(docker-compose ps -q webapp)":/python/reports/typing.xml typing.xml
            docker cp "$(docker-compose ps -q webapp)":/python/reports/unittesting.xml unittesting.xml
            docker cp "$(docker-compose ps -q webapp)":/python/reports/coverage.xml coverage.xml
            # Return the status code
            TOTAL=$((STATUS1))
            exit $TOTAL

      # - name: Run the Action
      #   uses: tzkhan/pr-update-action@v2
      #   with:
      #     repo-token: "${{ secrets.GITHUB_TOKEN }}"
      #     base-branch-regex: '[a-z\d-_.\\/]+'
      #     # head-branch-regex: 'foo-\d+'
      #     # title-template: '[%headbranch%] '
      #     body-template: |
      #       Merginrg into '%basebranch%'
      #       [Link to %headbranch%](https://url/to/browse/ticket/%headbranch%)
      #     body-update-action: 'suffix'
      #     body-uppercase-base-match: false  

  deploy-to-qa:
    name: Deploy to QA
    uses: ./deploy-qa.yml